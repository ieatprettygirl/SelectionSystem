services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes  # Только для разработки!
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami

  kafka:
    image: bitnami/kafka:3.6
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes  # Только для разработки!
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/bitnami
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 20s
      retries: 10

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  auth-db:
    image: postgres:latest
    environment:
      POSTGRES_DB: AuthDb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data
  company-vacancy-db:
    image: postgres:latest
    environment:
      POSTGRES_DB: CompVacDb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data
    
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"  # Доступ к pgAdmin через http://localhost:5050

  company-vacancy-service:
    build:
      context: ./company-vacancy-service
    expose:
      - "8083"
    deploy:
      replicas: 2
    depends_on:
      company-vacancy-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://company-vacancy-db:5432/CompVacDb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 12345678
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      
  auth-service:
    build:
      context: ./auth-service
    expose:
      - "8080"
    deploy:
      replicas: 2
    depends_on:
      auth-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-db:5432/AuthDb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 12345678
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
  notification-service:
    build:
      context: ./notification-service
    ports:
      - "8081:8081"
    depends_on:
    - redis
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  
  # api-gateway:
  #   build:
  #     context: ./api-gateway
  #   deploy:
  #     replicas: 3  # Количество реплик
  #   depends_on:
  #   - auth-service
  #   - company-vacancy-service
  #   - notification-service
  #   ports:
  #     - "8082"
      
  nginx:
    image: nginx:latest # Или nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - auth-service
      - company-vacancy-service
    networks:
      - default

    # depends_on:
    #   auth-service:
    #     condition: service_healthy
    #   company-vacancy-service:
    #     condition: service_healthy
    #   notification-service:
    #     condition: service_healthy
    # environment:
    #   SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    #   SPRING_REDIS_HOST: redis
    #   SPRING_REDIS_PORT: 6379
    #   # Другие переменные окружения, которые нужны вашему API Gateway
    #   # Например, URL-адреса сервисов:
    #   AUTH_SERVICE_URL: http://auth-service:8080
    #   COMPANY_VACANCY_SERVICE_URL: http://company-vacancy-service:8083
    #   NOTIFICATION_SERVICE_URL: http://notification-service:8081

  # MongoDB для Graylog
  mongo:
    image: mongo:5.0
    volumes:
      - mongo_data:/data/db

  # Elasticsearch для Graylog
  elasticsearch:
    image: elasticsearch:7.17.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false  # Отключаем security для тестов
    volumes:
      - es_data:/usr/share/elasticsearch/data
  graylog:
    image: graylog/graylog:5.0
    environment:
      # Генерация секретного ключа (минимум 16 символов)
      GRAYLOG_PASSWORD_SECRET: mysecretpassword123
      
      # SHA2 хеш пароля admin (замените на свой)
      GRAYLOG_ROOT_PASSWORD_SHA2: 8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      
      GRAYLOG_HTTP_BIND_ADDRESS: "0.0.0.0:9000"
      GRAYLOG_HTTP_EXTERNAL_URI: "http://localhost:9000/"
      GRAYLOG_ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
      GRAYLOG_MONGODB_URI: "mongodb://mongo:27017/graylog"
    ports:
      - "9000:9000"  # Web UI
      - "12202:12202/udp"  # GELF UDP
      - "1514:1514"  # Syslog
    depends_on:
      - mongo
      - elasticsearch
volumes:
  zookeeper_data:
  kafka_data:
  postgres_data:
  redis_data:
  mongo_data:
  es_data: